---
layout: post
title: Calculating Planet Volumes
image: "/posts/primes_image.jpeg"
tags: [Python, Numpy, Planet Volumes]
---

In this post I'm going to take the advantage of Numpy to quickly calculate the volume of all planets in our solar system.  At first glance, it seems just some basic math but Numpy adds a great value as we want to calculate the volume of all planets simultaneously.
Once I did that, I will crank it up and do it for 1000000 planets. Doing this, we can see how fast Numpy can undertake this calculations.

Let's get into it!

---

We have radii of planets as follow:
Mercury: 2439.7 km
Venus: 6051.8 km
Earth: 6371 km
Mars: 3389.7 km
Jupiter: 69911 km
Saturn: 58232	km
Uranus: 25362 km
Neptune: 24622 km

First let's start by setting up an array that contains radii of planets.

```ruby
radii = np.array([2439.7, 6051.8, 6371, 3389.7, 69911, 58232, 25362, 24622])
```

The volume of sphere is calculated using the formula: 4/3*pi*r^3.
We could create a loop that iterate through each planet and find the volume of all volumes. But, instead we will use Numpy to see how it can do the job in one swift motion.

```ruby
Planet_Volumes=4/3*np.pi*radii**3
```

Let's also create a place where we can store any primes we discover.  A list will be perfect for this job

```ruby
primes_list = []
```

We're going to end up using a while loop to iterate through our list and check for primes, but before we construct that I always it valuable to code up the logic and iterate manually first.  This means I can check that it is working correctly before I set it off to run through everything on it's own

So, we have our set of numbers (called number_range to check all integers between 2 and 20. Let's extract the first number from that set that we want to check as to whether it's a prime. When we check the value we're going to check if it is a prime...if it is, we're going to add it to our list called primes_list...if it isn't a prime we don't want to keep it

There is a method which will remove an element from a list or set and provide that value to us, and that method is called *pop*

```ruby
print(number_range)
>>> {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}
```
If we use pop, and assign this to the object called **prime** it will *pop* the first element from the set out of **number_range**, and into **prime**

```ruby
prime = number_range.pop()
print(prime)
>>> 2
print(number_range)
>>> {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}
```
